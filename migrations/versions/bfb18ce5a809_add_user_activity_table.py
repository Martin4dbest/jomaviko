"""Add user_activity table

Revision ID: bfb18ce5a809
Revises: 538c0a793fe3
Create Date: 2025-09-20 07:39:07.524425

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bfb18ce5a809'
down_revision = '538c0a793fe3'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_activity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('login_time', sa.DateTime(), nullable=True),
    sa.Column('logout_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('baking_records')
    op.drop_table('products')
    op.drop_table('orders')
    op.drop_table('inventory_items')
    with op.batch_alter_table('baker_inventory', schema=None) as batch_op:
        batch_op.drop_constraint('baker_inventory_seller_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['seller_id'], ['id'])

    with op.batch_alter_table('order', schema=None) as batch_op:
        batch_op.drop_constraint('order_seller_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['seller_id'], ['id'])

    with op.batch_alter_table('stock_history', schema=None) as batch_op:
        batch_op.drop_constraint('stock_history_seller_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('stock_history_admin_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['admin_id'], ['id'])
        batch_op.create_foreign_key(None, 'user', ['seller_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('stock_history', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('stock_history_admin_id_fkey', 'user', ['admin_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('stock_history_seller_id_fkey', 'user', ['seller_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('order', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('order_seller_id_fkey', 'user', ['seller_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('baker_inventory', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('baker_inventory_seller_id_fkey', 'user', ['seller_id'], ['id'], ondelete='CASCADE')

    op.create_table('inventory_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('seller_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='inventory_items_product_id_fkey'),
    sa.ForeignKeyConstraint(['seller_id'], ['user.id'], name='inventory_items_seller_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inventory_items_pkey')
    )
    op.create_table('orders',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('seller_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='orders_product_id_fkey'),
    sa.ForeignKeyConstraint(['seller_id'], ['user.id'], name='orders_seller_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='orders_pkey')
    )
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sku', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    sa.UniqueConstraint('sku', name='products_sku_key')
    )
    op.create_table('baking_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('baker_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ingredient_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('quantity_used', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['baker_id'], ['user.id'], name='baking_records_baker_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='baking_records_pkey')
    )
    op.drop_table('user_activity')
    # ### end Alembic commands ###
