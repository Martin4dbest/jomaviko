"""Added seller_id to Inventory model

Revision ID: b6bcf63dc79e
Revises: 87159cc44ded
Create Date: 2025-04-20 03:08:31.417250
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine import reflection

# revision identifiers, used by Alembic.
revision = 'b6bcf63dc79e'
down_revision = '87159cc44ded'
branch_labels = None
depends_on = None

def check_column_exists(table_name, column_name):
    """Helper function to check if a column exists in a table."""
    inspector = reflection.Inspector.from_engine(op.get_bind())
    columns = [column['name'] for column in inspector.get_columns(table_name)]
    return column_name in columns

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('inventory', schema=None) as batch_op:
        # Only add the column if it does not already exist
        if not check_column_exists('inventory', 'seller_id'):
            batch_op.add_column(sa.Column('seller_id', sa.Integer(), nullable=False))
            batch_op.create_foreign_key(None, 'user', ['seller_id'], ['id'])

    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.alter_column('location',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.alter_column('location',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)

    with op.batch_alter_table('inventory', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('seller_id')

    # ### end Alembic commands ###
